---
- name: "Clone Existing VM/Template and Configure"
  hosts: localhost
  connection: local
  gather_facts: no

  vars_files:
    - secrets.yml

  vars:
    proxmox_host: "192.168.210.135"
    proxmox_user: "root@pam"
    proxmox_token_id: "demov1"
    proxmox_api_secret: "{{ proxmox_api_secret }}"
    proxmox_node: "pve"
    template_vm: ahlelele
    new_vm_name: "cloned-vm"

  tasks:
    - name: "Clone VM/template to new VM"
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_token_id: "{{ proxmox_token_id }}"
        api_token_secret: "{{ proxmox_api_secret }}"
        node: "{{ proxmox_node }}"
        clone: "{{ template_vm }}"
        name: "{{ new_vm_name }}"
        storage: local-lvm
        format: qcow2
        full: true
        timeout: 500
      register: clone_result

    - name: "Wait for VM to be ready"
      pause:
        seconds: 30
      when: clone_result.changed

    - name: "Start the cloned VM"
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_token_id: "{{ proxmox_token_id }}"
        api_token_secret: "{{ proxmox_api_secret }}"
        node: "{{ proxmox_node }}"
        name: "{{ new_vm_name }}"
        state: started
      when: clone_result.changed

    - name: "Wait for VM to boot"
      pause:
        seconds: 60
      when: clone_result.changed

    - name: "Execute GRUB repair via Proxmox console"
      community.general.proxmox:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_token_id: "{{ proxmox_token_id }}"
        api_token_secret: "{{ proxmox_api_secret }}"
        node: "{{ proxmox_node }}"
        vmid: "{{ new_vm_id }}"
        command: "sendkey ctrl-alt-del"

    - name: "Debug VM status"
      debug:
        var: vm_status
      when: clone_result.changed